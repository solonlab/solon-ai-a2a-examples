package io.a2a.spec;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import io.a2a.util.Assert;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.Arrays;
import java.util.List;
import java.util.Map;

/**
 * Represents a file, data structure, or other resource generated by an agent during a task.
 */
@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonIgnoreProperties(ignoreUnknown = true)
@NoArgsConstructor
@Data
public class Artifact {
    String artifactId;
    String name;
    String description;
    List<Part<?>> parts;
    Map<String, Object> metadata;

    public Artifact(String artifactId, String name, String description, List<Part<?>> parts, Map<String, Object> metadata) {
        Assert.checkNotNullParam("artifactId", artifactId);
        Assert.checkNotNullParam("parts", parts);
        if (parts.isEmpty()) {
            throw new IllegalArgumentException("Parts cannot be empty");
        }

        this.artifactId = artifactId;
        this.name = name;
        this.description = description;
        this.parts = parts;
        this.metadata = metadata;
    }

    public String artifactId() {
        return artifactId;
    }

    public String name() {
        return name;
    }

    public String description() {
        return description;
    }

    public List<Part<?>> parts() {
        return parts;
    }

    public Map<String, Object> metadata() {
        return metadata;
    }

    public static class Builder {
        private String artifactId;
        private String name;
        private String description;
        private List<Part<?>> parts;
        private Map<String, Object> metadata;

        public Builder(){
        }

        public Builder(Artifact existingArtifact) {
            artifactId = existingArtifact.artifactId;
            name = existingArtifact.name;
            description = existingArtifact.description;
            parts = existingArtifact.parts;
            metadata = existingArtifact.metadata;
        }

        public Builder artifactId(String artifactId) {
            this.artifactId = artifactId;
            return this;
        }


        public Builder name(String name) {
            this.name = name;
            return this;
        }

        public Builder description(String description) {
            this.description = description;
            return this;
        }

        public Builder parts(List<Part<?>> parts) {
            this.parts = parts;
            return this;
        }

        public Builder parts(Part<?>... parts) {
            this.parts = Arrays.asList(parts);
            return this;
        }

        public Builder metadata(Map<String, Object> metadata) {
            this.metadata = metadata;
            return this;
        }

        public Artifact build() {
            return new Artifact(artifactId, name, description, parts, metadata);
        }
    }
}
